设置
###Python3 注释################################################################################3

确保对模块, 函数, 方法和行内注释使用正确的风格
Python中的注释有单行注释和多行注释：
Python中单行注释以 # 开头，例如：：
# 这是一个注释
print("Hello, World!") 
多行注释用三个单引号 ''' 或者三个双引号 """ 将注释括起来，例如:
1、单引号（'''）
#!/usr/bin/python3 
'''
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
'''
print("Hello, World!") 
2、双引号（"""）
#!/usr/bin/python3 
"""
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
"""
print("Hello, World!") 
###windows7相关设置###################################################################################
			
	C:\Users\Administrator>E:						
	E:\>cd pythonxs			
	E:\pythonxs>python learning.py		

   输入和输出
	输出
	用print()在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出'hello, world'，用代码实现如下：
	>>> print('hello, world')
	print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
	>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
	The quick brown fox jumps over the lazy dog
	print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：
	print-explain	
   输入
	name = input('please enter your name: ')
	print('hello,', name)
小结
			任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了			输出，程序运行后才能告诉用户任务的结果。
			输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。
			input()和print()是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面			完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击	“确定”后在网页上看到输出			信息。
###python基础##########################################################################################3
》循环
		1、for in 循环迭代，数字
		2、while循环，条件循环，条件不满足时退出循环。比如我们要计算100以			内所有奇数			之和，可以用while循环实现：
					sum = 0
					n = 99
					while n > 0:
					    sum = sum + n
					    n = n - 2
					print(sum)
			在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出
		3、break
			如果要提前结束循环，可以用break语句：
		4、continue
				在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环
	n = 0
	while n < 10:
	    n = n + 1
	    if n % 2 == 0: # 如果n是偶数，执行continue语句
	        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
	    print(n)
小结
	循环是让计算机做重复任务的有效的方法。
	break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。
	要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。
##########################################################################################################	使用dict和set
dict

Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。

举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：

names = ['Michael', 'Bob', 'Tracy']
scores = [95, 75, 85]
给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。

如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：

>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
>>> d['Michael']
95	
要避免key不存在的错误，有两种办法，
一是通过in判断key是否存在：

>>> 'Thomas' in d
False
二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：

>>> d.get('Thomas')
>>> d.get('Thomas', -1)
注意：返回None的时候Python的交互环境不显示结果。
请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。

而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。

set
set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
要创建一个set，需要提供一个list作为输入集合：
>>> s = set([1, 2, 3])
>>> s
{1, 2, 3}
注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。
重复元素在set中自动被过滤：
>>> s = set([1, 1, 2, 2, 3, 3])
>>> s
{1, 2, 3}
dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。
###函数###################################################################################
&&&&&调用函数
当代码出现有规律的重复的时候，你就需要当心了
抽象
抽象是数学中非常常见的概念。举个例子：
计算数列的和，比如：1 + 2 + 3 + ... + 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 + 2 + 3 + ... + 100记作：
100
∑n
n=1
这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。
而且，这种抽象记法是可扩展的，比如：
100
∑(n2+1)
n=1
还原成加法运算就变成了：
(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)
《》《》《》可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。《》《》《》
写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。

调用函数
也可以在交互式命令行通过help(abs)查看abs函数的帮助信息。
调用函数的时候，如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个
如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错误信息：str是错误的参数类型：
函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：

>>> a = abs # 变量a指向abs函数
>>> a(-1) # 所以也可以通过a调用abs函数
1
&&&&定义函数
定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
print(my_abs(-99))
如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：
空函数

如果想定义一个什么事也不做的空函数，可以用pass语句：

def nop():
    pass
pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。

pass还可以用在其他语句里，比如：

参数检查

调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：
返回多个值

函数可以返回多个值吗？答案是肯定的。

比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：
import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数
但其实这只是一种假象，Python函数返回的仍然是单一值：
原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。

小结
定义函数时，需要确定函数名和参数个数；

如果有必要，可以先对参数的数据类型做检查；

函数体内部可以用return随时返回函数结果；

函数执行完毕也没有return语句时，自动return None。

函数可以同时返回多个值，但其实就是一个tuple。

练习